<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword />
        </keywordset>
    </info>
    <section xml:id="bhax-textbook-feladatok-mandelbrot.Mandelbrot">
        <title>A Mandelbrot halmaz</title>
        <para>
            Írj olyan C programot, amely kiszámolja a Mandelbrot halmazt!     
        </para>
        <para>
            Megoldás videó:
            <link xlink:href="https://youtu.be/462MXZzUle0">YouTube</link>
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="../../../bhax/attention_raising/CUDA/mandelpngt.c++">
                <filename>bhax/attention_raising/CUDA/mandelpngt.c++</filename>
            </link>
            nevű állománya.
        </para>
        <para>
            A Mandelbrot halmazt 1980-ban találta meg Benoit Mandelbrot a 
            komplex számsíkon. Komplex számok azok a számok, amelyek körében 
            válaszolni lehet az olyan egyébként értelmezhetetlen kérdésekre, 
            hogy melyik az a két szám, amelyet összeszorozva -9-et kapunk, 
            mert ez a szám például a 3i komplex szám.
        </para>
        <para>
            A Mandelbrot halmazt úgy láthatjuk meg, hogy a sík origója középpontú 4 
            oldalhosszúságú négyzetbe lefektetünk egy, mondjuk 800x800-as 
            rácsot és kiszámoljuk, hogy a rács pontjai mely komplex számoknak 
            felelnek meg. A rács minden pontját megvizsgáljuk a 
            z
            <subscript>n+1</subscript>
            =z
            <subscript>n</subscript>
            <superscript>2</superscript>
            +c, 
            (0&lt;=n) képlet alapján úgy, hogy a c az éppen vizsgált rácspont. 
            A z0 az origó. Alkalmazva a képletet a
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    z
                    <subscript>0</subscript>
                    = 0
                </para>
            </listitem>
            <listitem>
                <para>
                    z
                    <subscript>1</subscript>
                    = 0
                    <superscript>2</superscript>
                    +c = c
                </para>
            </listitem>
            <listitem>
                <para>
                    z
                    <subscript>2</subscript>
                    = c
                    <superscript>2</superscript>
                    +c
                </para>
            </listitem>
            <listitem>
                <para>
                    z
                    <subscript>3</subscript>
                    = (c
                    <superscript>2</superscript>
                    +c)
                    <superscript>2</superscript>
                    +c
                </para>
            </listitem>
            <listitem>
                <para>
                    z
                    <subscript>4</subscript>
                    = ((c
                    <superscript>2</superscript>
                    +c)
                    <superscript>2</superscript>
                    +c)
                    <superscript>2</superscript>
                    +c
                </para>
            </listitem>
            <listitem>
                <para>
                    ... s így tovább.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            Azaz kiindulunk az origóból (z
            <subscript>0</subscript>
            ) 
            és elugrunk a rács első pontjába a z
            <subscript>1</subscript>
            = c-be, 
            aztán a c-től függően a további z-kbe. Ha ez az utazás kivezet a 
            2 sugarú körből, akkor azt mondjuk, hogy az a vizsgált rácspont 
            nem a Mandelbrot halmaz eleme. Nyilván nem tudunk végtelen sok 
            z-t megvizsgálni, ezért csak véges sok z elemet nézünk meg minden 
            rácsponthoz. Ha eközben nem lép ki a körből, akkor feketére 
            színezzük, hogy az a c rácspont a halmaz része. (Színes meg úgy 
            lesz a kép, hogy változatosan színezzük, például minél későbbi 
            z-nél lép ki a körből, annál sötétebbre).
        </para>
        <figure>
            <title>A kirajzolt Mandelbrot halmaz</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/output.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A kirajzolt Mandelbrot halmaz</phrase>
                </textobject>
            </mediaobject>
        </figure>
    </section>

    <section>
        <title>
            A Mandelbrot halmaz a
            <filename>std::complex</filename>
            osztállyal
        </title>
        <para>
            Írj olyan C++ programot, amely kiszámolja a Mandelbrot halmazt!                     
        </para>
        <para>
            Megoldás videó:
            <link xlink:href="https://youtu.be/462MXZzUle0">YouTube</link>
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>        
            A program az előző algoritmus alapján számítja ki és rajzolja meg a Mandelbrot halmazt. Szükségünk van a png++ és a complex könyvtárakra. Futtatásnál deklaráljuk a létrehozandó kép szélességét magasságát és iterációs határát.
        </para>
        <programlisting language="c++">
            <![CDATA[// Verzio: 3.1.2.cpp
// Forditas:
// g++ 3.1.2.cpp -lpng -O3 -o 3.1.2
// Futtatas:
// ./3.1.2 mandel.png 1920 1080 2040 -0.01947381057309366392260585598705802112818 -0.0194738105725413418456426484226540196687 0.7985057569338268601555341774655971676111 0.798505756934379196110285192844457924366
// ./3.1.2 mandel.png 1920 1080 1020 0.4127655418209589255340574709407519549131 0.4127655418245818053080142817634623497725 0.2135387051768746491386963270997512154281 0.2135387051804975289126531379224616102874
// Nyomtatas:
// a2ps 3.1.2.cpp -o 3.1.2.cpp.pdf -1 --line-numbers=1  --left-footer="BATF41 HAXOR STR34M" --right-footer="https://bhaxor.blog.hu/" --pro=color
// ps2pdf 3.1.2.cpp.pdf 3.1.2.cpp.pdf.pdf
//
//
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.


#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
]]>
        </programlisting>
        <figure>
            <title>A kirajzolt complex Mandelbrot halmaz</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandel.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A kirajzolt complex Mandelbrot halmaz</phrase>
                </textobject>
            </mediaobject>
        </figure>
    </section>

    <section>
        <title>Biomorfok</title>
        <para></para>
        <para>
            Megoldás videó:
            <link xlink:href="https://youtu.be/462MXZzUle0">YouTube</link>
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            A biomorfokra (a Julia halmazokat rajzoló bug-os programjával) 
            rátaláló Clifford Pickover azt hitte természeti törvényre 
            bukkant.
        </para>
        <para>
            A különbség a Mandelbrot halmaz
            és a Julia halmazok között az, hogy a komplex iterációban az előbbiben a c változó, utóbbiban pedig állandó. 
            A következő Mandelbrot csipet azt mutatja, hogy a c befutja a vizsgált összes rácspontot.
        </para>
        <programlisting language="c++">
            <![CDATA[  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }
]]>
        </programlisting>
        <para>
            Ezzel szemben a Julia halmazos csipetben a cc nem változik, hanem minden vizsgált
            z rácspontra ugyanaz.
        </para>
        <programlisting language="c++">
            <![CDATA[    // j megy a sorokon
    for ( int j = 0; j < magassag; ++j )
    {
        // k megy az oszlopokon
        for ( int k = 0; k < szelesseg; ++k )
        {
            double reZ = a + k * dx;
            double imZ = d - j * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {
                z_n = std::pow(z_n, 3) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }
]]>
        </programlisting>
        <programlisting language="c++">
            <![CDATA[// Verzio: 3.1.3.cpp
// Forditas:
// g++ 3.1.3.cpp -lpng -O3 -o 3.1.3
// Futtatas:
// ./3.1.3 bmorf.png 800 800 10 -2 2 -2 2 .285 0 10
// Nyomtatas:
// a2ps 3.1.3.cpp -o 3.1.3.cpp.pdf -1 --line-numbers=1  --left-footer="BATF41 HAXOR STR34M" --right-footer="https://bhaxor.blog.hu/" --pro=color
// 
// BHAX Biomorphs
// Copyright (C) 2019
// Norbert Batfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Version history
//
// https://youtu.be/IJMbgRzY76E
// See also https://www.emis.de/journals/TJNSA/includes/files/articles/Vol9_Iss5_2305--2315_Biomorphs_via_modified_iterations.pdf
//

#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
]]>
        </programlisting>
        <figure>
            <title>A kirajzolt Biomorf</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/biomorf.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A kirajzolt Biomorf</phrase>
                </textobject>
            </mediaobject>
        </figure>
    </section>

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para></para>
        <para>
            Megoldás videó:
            <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="../../../bhax/attention_raising/CUDA/mandelpngc_60x60_100.cu">
                <filename>bhax/attention_raising/CUDA/mandelpngc_60x60_100.cu</filename>
            </link>
            nevű állománya.
        </para>
        <para>
            A CUDA technológiával való megvalósítás csökkenti a program futási idejét, mivel CPU szál helyett a GPU szálait használja. Létrehozunk egy 60x60-as blokkot, ahol blokkonként 100 szál fog futni, tehát 600x600-as Mandelbrot halmaz lesz. 50-70x lesz így rövidebb a számítási idő. Létrehozunk egy kernelt (mandelkernel) és minden szál, ami ezt használja, külön azonosítóval fog rendelkezni, ezek a tj és tk-k. Létrehozzuk a j és k blokkokat, amelyekbe 10x annyi szálat helyezünk el. cudaMalloc() függvénnyel lefoglaljuk a szükséges memóriát majd létrehozzuk a 3 dimenziós hálót (dim3). A cudaMemcpy függvénnyel átmásoljuk az adatokat a device memóriába a host memóriából, majd a cudaFree() függvénnyel felszabadítjuk a memóriát.
        </para>
        <programlisting language="c">
            <![CDATA[
// mandelpngc_60x60_100.cu
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// Version history
//
//  Mandelbrot png
//  Programozó Páternoszter/PARP
//   https://www.tankonyvtar.hu/hu/tartalom/tamop412A/2011-0063_01_parhuzamos_prog_linux
//
//  https://youtu.be/gvaqijHlRUs

_global__ void
mandelkernel (int *kepadat)
{

    int tj = threadIdx.x;
    int tk = threadIdx.y;

    int j = blockIdx.x * 10 + tj;
    int k = blockIdx.y * 10 + tk;

    kepadat[j + k * MERET] = mandel (j, k);

}

void
cudamandel (int kepadat[MERET][MERET])
{

    int *device_kepadat;
    cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));

    // dim3 grid (MERET, MERET);
    // mandelkernel <<< grid, 1 >>> (device_kepadat);
    
    dim3 grid (MERET / 10, MERET / 10);
    dim3 tgrid (10, 10);
    mandelkernel <<< grid, tgrid >>> (device_kepadat);  
    
    cudaMemcpy (kepadat, device_kepadat,
            MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
    cudaFree (device_kepadat);

}
]]>
        </programlisting>

    </section>

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z
            <subscript>n</subscript>
            komplex számokat!
        </para>
        <para>
            Megoldás videó:
            <link xlink:href=""></link>
            Illetve
            <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>
            .
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href=""></link>
        </para>
        <para>
            A GUI QT-ban van megírva, hogy Cross-Platformos legyen.
        </para>
        <para>
            A header fileokban a szükséges osztályokat és a függvényeket tároljuk. 
        </para>
        <para>
            A frakablak az ablak elkészítését végzi. Itt állítjuk be az ablak nevét, paramétereit és itt számítjuk újra a képet minden nagításnál és a kép színeit is itt állítjuk.
        </para>
        <programlisting language="c">
            <![CDATA[
            // frakablak.cpp
    //
    // Mandelbrot halmaz rajzoló
    // Programozó Páternoszter
    //
    // Copyright (C) 2011, Bátfai Norbert, nbatfai@inf.unideb.hu, nbatfai@gmail.com
    //
    // This program is free software: you can redistribute it and/or modify
    // it under the terms of the GNU General Public License as published by
    // the Free Software Foundation, either version 3 of the License, or
    // (at your option) any later version.
    //
    // This program is distributed in the hope that it will be useful,
    // but WITHOUT ANY WARRANTY; without even the implied warranty of
    // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    // GNU General Public License for more details.
    //
    // You should have received a copy of the GNU General Public License
    // along with this program.  If not, see <http://www.gnu.org/licenses/>.
    //
    // Ez a program szabad szoftver; terjeszthetõ illetve módosítható a
    // Free Software Foundation által kiadott GNU General Public License
    // dokumentumában leírtak; akár a licenc 3-as, akár (tetszõleges) késõbbi
    // változata szerint.
    //
    // Ez a program abban a reményben kerül közreadásra, hogy hasznos lesz,
    // de minden egyéb GARANCIA NÉLKÜL, az ELADHATÓSÁGRA vagy VALAMELY CÉLRA
    // VALÓ ALKALMAZHATÓSÁGRA való származtatott garanciát is beleértve.
    // További részleteket a GNU General Public License tartalmaz.
    //
    // A felhasználónak a programmal együtt meg kell kapnia a GNU General
    // Public License egy példányát; ha mégsem kapta meg, akkor
    // tekintse meg a <http://www.gnu.org/licenses/> oldalon.
    //
    //
    // Version history:
    //
    // 0.0.1    Bár a Nokia Qt SDK éppen tartalmaz egy Mandelbrotos példát, de
    // ezt nem tartottam megfelelõnek elsõ Qt programként ajánlani, mert elég
    // bonyolult: használ kölcsönös kizárást stb. Ezért "from scratch" megírtam
    // egy sajátot a Javát tanítokhoz írt dallamára:
    // http://www.tankonyvtar.hu/informatika/javat-tanitok-2-2-080904-1
    //
    
    #include "frakablak.h"
    
    FrakAblak::FrakAblak(double a, double b, double c, double d,
                         int szelesseg, int iteraciosHatar, QWidget *parent)
                             : QMainWindow(parent)
    {
        setWindowTitle("Mandelbrot halmaz");
    
        int magassag = (int)(szelesseg * ((d-c)/(b-a)));
    
        setFixedSize(QSize(szelesseg, magassag));
        fraktal= new QImage(szelesseg, magassag, QImage::Format_RGB32);
    
        mandelbrot = new FrakSzal(a, b, c, d, szelesseg, magassag, iteraciosHatar, this);
        mandelbrot->start();
    
    }
    
    FrakAblak::~FrakAblak()
    {
        delete fraktal;
        delete mandelbrot;
    }
    
    void FrakAblak::paintEvent(QPaintEvent*) {
        QPainter qpainter(this);
        qpainter.drawImage(0, 0, *fraktal);
        qpainter.end();
    }
    
    void FrakAblak::vissza(int magassag, int *sor, int meret, int hatar)
    {
        for(int i=0; i<meret; ++i) {
            //        QRgb szin = qRgb(0, 255-sor[i], 0);
            QRgb szin;
            if(sor[i] == hatar)
                szin = qRgb(0,0,0);
            else
                szin = qRgb(
                        255-sor[i],
                        255-sor[i]%64,
                        255-sor[i]%16 );
    
            fraktal->setPixel(i, magassag, szin);
        }
        update();
    }
    
            ]]>
        </programlisting>
        <para>
            A frakszalban a szükséges változókat állítjuk és itt zajlik a halmazt létrehozó számítás.
        </para>
        <programlisting language="c">
            <![CDATA[
            // frakszal.cpp
    //
    // Mandelbrot halmaz rajzoló
    // Programozó Páternoszter
    //
    // Copyright (C) 2011, Bátfai Norbert, nbatfai@inf.unideb.hu, nbatfai@gmail.com
    //
    // This program is free software: you can redistribute it and/or modify
    // it under the terms of the GNU General Public License as published by
    // the Free Software Foundation, either version 3 of the License, or
    // (at your option) any later version.
    //
    // This program is distributed in the hope that it will be useful,
    // but WITHOUT ANY WARRANTY; without even the implied warranty of
    // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    // GNU General Public License for more details.
    //
    // You should have received a copy of the GNU General Public License
    // along with this program.  If not, see <http://www.gnu.org/licenses/>.
    //
    // Ez a program szabad szoftver; terjeszthetõ illetve módosítható a
    // Free Software Foundation által kiadott GNU General Public License
    // dokumentumában leírtak; akár a licenc 3-as, akár (tetszõleges) késõbbi
    // változata szerint.
    //
    // Ez a program abban a reményben kerül közreadásra, hogy hasznos lesz,
    // de minden egyéb GARANCIA NÉLKÜL, az ELADHATÓSÁGRA vagy VALAMELY CÉLRA
    // VALÓ ALKALMAZHATÓSÁGRA való származtatott garanciát is beleértve.
    // További részleteket a GNU General Public License tartalmaz.
    //
    // A felhasználónak a programmal együtt meg kell kapnia a GNU General
    // Public License egy példányát; ha mégsem kapta meg, akkor
    // tekintse meg a <http://www.gnu.org/licenses/> oldalon.
    //
    //
    // Version history:
    //
    // 0.0.1    Bár a Nokia Qt SDK éppen tartalmaz egy Mandelbrotos példát, de
    // ezt nem tartottam megfelelõnek elsõ Qt programként ajánlani, mert elég
    // bonyolult: használ kölcsönös kizárást stb. Ezért "from scratch" megírtam
    // egy sajátot a Javát tanítokhoz írt dallamára:
    // http://www.tankonyvtar.hu/informatika/javat-tanitok-2-2-080904-1
    //
    
    #include "frakszal.h"
    
    FrakSzal::FrakSzal(double a, double b, double c, double d,
                       int szelesseg, int magassag, int iteraciosHatar, FrakAblak *frakAblak)
    {
        this->a = a;
        this->b = b;
        this->c = c;
        this->d = d;
        this->szelesseg = szelesseg;
        this->iteraciosHatar = iteraciosHatar;
        this->frakAblak = frakAblak;
        this->magassag = magassag;
    
        egySor = new int[szelesseg];
    }
    
    FrakSzal::~FrakSzal()
    {
        delete[] egySor;
    }
    
    // A szál kódját a Javát tanítokhoz írt Java kódomból vettem át
    // http://www.tankonyvtar.hu/informatika/javat-tanitok-2-2-080904-1
    // mivel itt az algoritmust is leírtam/lerajzoltam, így meghagytam
    // a kommenteket, hogy a hallgató könnyen hozzáolvashassa az "elméletet",
    // ha érdekli.
    void FrakSzal::run()
    {
        // A [a,b]x[c,d] tartományon milyen sûrû a
        // megadott szélesség, magasság háló:
        double dx = (b-a)/szelesseg;
        double dy = (d-c)/magassag;
        double reC, imC, reZ, imZ, ujreZ, ujimZ;
        // Hány iterációt csináltunk?
        int iteracio = 0;
        // Végigzongorázzuk a szélesség x magasság hálót:
        for(int j=0; j<magassag; ++j) {
            //sor = j;
            for(int k=0; k<szelesseg; ++k) {
                // c = (reC, imC) a háló rácspontjainak
                // megfelelõ komplex szám
                reC = a+k*dx;
                imC = d-j*dy;
                // z_0 = 0 = (reZ, imZ)
                reZ = 0;
                imZ = 0;
                iteracio = 0;
                // z_{n+1} = z_n * z_n + c iterációk
                // számítása, amíg |z_n| < 2 vagy még
                // nem értük el a 255 iterációt, ha
                // viszont elértük, akkor úgy vesszük,
                // hogy a kiinduláci c komplex számra
                // az iteráció konvergens, azaz a c a
                // Mandelbrot halmaz eleme
                while(reZ*reZ + imZ*imZ < 4 && iteracio < iteraciosHatar) {
                    // z_{n+1} = z_n * z_n + c
                    ujreZ = reZ*reZ - imZ*imZ + reC;
                    ujimZ = 2*reZ*imZ + imC;
                    reZ = ujreZ;
                    imZ = ujimZ;
    
                    ++iteracio;
    
                }
                // ha a < 4 feltétel nem teljesült és a
                // iteráció < iterációsHatár sérülésével lépett ki, azaz
                // feltesszük a c-rõl, hogy itt a z_{n+1} = z_n * z_n + c
                // sorozat konvergens, azaz iteráció = iterációsHatár
                // ekkor az iteráció %= 256 egyenlõ 255, mert az esetleges
                // nagyítasok során az iteráció = valahány * 256 + 255
    
    
                //a színezést viszont már majd a FrakAblak osztályban lesz
                egySor[k] = iteracio;
            }
            // Ábrázolásra átadjuk a kiszámolt sort a FrakAblak-nak.
            frakAblak->vissza(j, egySor, szelesseg, iteraciosHatar);
        }
    }
    
            ]]>
        </programlisting>

    </section>

    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para></para>
        <para>
            Megoldás videó:
            <link xlink:href="https://youtu.be/Ui3B6IJnssY">https://youtu.be/Ui3B6IJnssY</link>
            , 4:27-től.
            Illetve
            <link xlink:href="https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal">https://bhaxor.blog.hu/2018/09/02/ismerkedes_a_mandelbrot_halmazzal</link>
            .
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#id570518</link>
        </para>
        <programlisting>
            <![CDATA[
			/*
 * MandelbrotHalmazNagyito.java
 *
 * DIGIT 2005, Javat tanitok
 * Batfai Norbert, nbatfai@inf.unideb.hu
 *
 */
/**
 * A Mandelbrot halmazt nagyito es kirajzolo osztaly.
 *
 * @author Batfai Norbert, nbatfai@inf.unideb.hu
 * @version 0.0.2
 */
public class MandelbrotHalmazNagyito extends MandelbrotHalmaz {
    /** A nagyitando kijelolt teruletet bal felso sarka. */
    private int x, y;
    /** A nagyitando kijelolt terulet szelessege es magassaga. */
    private int mx, my;
    /**
     * Letrehoz egy a Mandelbrot halmazt a komplex sik
     * [a,b]x[c,d] tartomanya felett kiszamolo es nygitani tudo
     * <code>MandelbrotHalmazNagyito</code> objektumot.
     *
     * @param      a              a [a,b]x[c,d] tartomany a koordinataja.
     * @param      b              a [a,b]x[c,d] tartomany b koordinataja.
     * @param      c              a [a,b]x[c,d] tartomany c koordinataja.
     * @param      d              a [a,b]x[c,d] tartomany d koordinataja.
     * @param      szelesseg      a halmazt tartalmazo tomb szelessege.
     * @param      iteraciosHatar a szamitas pontossaga.
     */
    public MandelbrotHalmazNagyito(double a, double b, double c, double d,
            int szelesseg, int iteraciosHatar) {
        // Az os osztaly konstruktoranak hivasa
        super(a, b, c, d, szelesseg, iteraciosHatar);
        setTitle("A Mandelbrot halmaz nagyitasai");
	]]>
        </programlisting>
        <para>
			A a nagyítandó területet a bal egérgombbal tudjuk kijelölni. Az egér kattintásait egy listener segítségével dolgozzuk fel. 
			Majd megnézzük hol van a mutató pozíciója. A kijelölő tégalap bal felső sarkának a koordinátái az x és y, 
			az mx és my a téglalap magassága és szélessége. A mousepressed() függvényben ezeket az adatokat kérjük le.
			Az mx és my-t 0-ra állítjuk és majd akkor fogjuk növelni ha a téglalapot pakoljuk. A pakolás mértékét egy egér mozgását érzékelő
			listener-rel kapjuk meg. Ha felengedjük az egeret újrakezdi a számolást és csinál egy új objektumot. 
			Ha kivonjuk téglalap x és y koordinátáiból az egérmutató aktuális helyzetét akkor megkapjuk 
			a kirajzolandó téglalap méreteit.
		</para>
        <programlisting>
            <![CDATA[
        addMouseListener(new java.awt.event.MouseAdapter() {
            // Eger kattintassal jeloljuk ki a nagyitando teruletet
            // bal felso sarkat vagy ugyancsak eger kattintassal
            // vizsgaljuk egy adott pont iteracioit:
		public void mousePressed(java.awt.event.MouseEvent m) {
                // Az egermutato pozicioja
                x = m.getX();
                y = m.getY();
                // Az 1. eger gombbal a nagyitando terulet kijeloleset
                // vegezzuk:
                if(m.getButton() == java.awt.event.MouseEvent.BUTTON1 ) {
                    // A nagyitando kijelolt teruletet bal felso sarka: (x,y)
                    // es szelessege (majd a vonszolas noveli)
                    mx = 0;
                    my = 0;
                    repaint();
                } else {
                    // Nem az 1. eger gombbal az egermutato mutatta c
                    // komplex szambol inditott iteraciokat vizsgalhatjuk
                    MandelbrotIteraciok iteraciok =
                            new MandelbrotIteraciok(
                            MandelbrotHalmazNagyito.this, 50);
                    new Thread(iteraciok).start();
                }
            }
            // Vonszolva kijelolunk egy teruletet...
            // Ha felengedjuk, akkor a kijelolt terulet
            // ujraszamitasa indul:
            public void mouseReleased(java.awt.event.MouseEvent m) {
                if(m.getButton() == java.awt.event.MouseEvent.BUTTON1 ) {
                    double dx = (MandelbrotHalmazNagyito.this.b
                            - MandelbrotHalmazNagyito.this.a)
                            /MandelbrotHalmazNagyito.this.szelesseg;
                    double dy = (MandelbrotHalmazNagyito.this.d
                            - MandelbrotHalmazNagyito.this.c)
                            /MandelbrotHalmazNagyito.this.magassag;
                    // Az uj Mandelbrot nagyito objektum elkeszitese:
                    new MandelbrotHalmazNagyito(
                            MandelbrotHalmazNagyito.this.a+x*dx,
                            MandelbrotHalmazNagyito.this.a+x*dx+mx*dx,
                            MandelbrotHalmazNagyito.this.d-y*dy-my*dy,
                            MandelbrotHalmazNagyito.this.d-y*dy,
                            600,
                            MandelbrotHalmazNagyito.this.iteraciosHatar)
                }
            }
        });
        // Eger mozgas esemenyek feldolgozasa:
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            // Vonszolassal jeloljuk ki a negyzetet:
            public void mouseDragged(java.awt.event.MouseEvent m) {
                // A nagyitando kijelolt terulet szelessege es magassaga:
                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });
    }
]]>
        </programlisting>

        <para>
			Az alábbi kódcsipet mutatja be a pillanatkép készítő funkciót. Kirajzoljuk a területet jelző tégalalapot és visszaadjuk az egérmutató
			akutális helyzetét. A main függvényben példányosítunk egy MandelBrotHalmazNagyito objektumot és kész is. 
		</para>
        <programlisting>
            <![CDATA[
 /**
     * Pillanatfelvetelek keszitese.
     */
    public void pillanatfelvetel() {
        // Az elmentendo kep elkeszitese:
        java.awt.image.BufferedImage mentKep =
                new java.awt.image.BufferedImage(szelesseg, magassag,
                java.awt.image.BufferedImage.TYPE_INT_RGB);
        java.awt.Graphics g = mentKep.getGraphics();
        g.drawImage(kep, 0, 0, this);
        g.setColor(java.awt.Color.BLACK);
        g.drawString("a=" + a, 10, 15);
        g.drawString("b=" + b, 10, 30);
        g.drawString("c=" + c, 10, 45);
        g.drawString("d=" + d, 10, 60);
        g.drawString("n=" + iteraciosHatar, 10, 75);
        if(szamitasFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
        g.dispose();
        // A pillanatfelvetel kepfajl nevenek kepzese:
        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("MandelbrotHalmazNagyitas_");
        sb.append(++pillanatfelvetelSzamlalo);
        sb.append("_");
        // A fajl nevebe belevesszuk, hogy melyik tartomanyban
        // talaltuk a halmazt:
        sb.append(a);
        sb.append("_");
        sb.append(b);
        sb.append("_");
        sb.append(c);
        sb.append("_");
        sb.append(d);
        sb.append(".png");
        // png formatumu kepet mentunk
        try {
            javax.imageio.ImageIO.write(mentKep, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }
    /**
     * A nagyitando kijelolt teruletet jelzo negyzet kirajzolasa.
     */
    public void paint(java.awt.Graphics g) {
        // A Mandelbrot halmaz kirajzolasa
        g.drawImage(kep, 0, 0, this);
        // Ha eppen fut a szamitas, akkor egy voros
        // vonallal jeloljuk, hogy melyik sorban tart:
        if(szamitasFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }
        // A jelzo negyzet kirajzolasa:
        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
    }
    /**
     * Hol all az egermutato?
     * @return int a kijelolt pont oszlop pozicioja.
     */    
    public int getX() {
        return x;
    }
    /**
     * Hol all az egermutato?
     * @return int a kijelolt pont sor pozicioja.
     */    
    public int getY() {
        return y;
    }
    /**
     * Peldanyosit egy Mandelbrot halmazt nagyito obektumot.
     */
    public static void main(String[] args) {
        // A kiindulo halmazt a komplex sik [-2.0, .7]x[-1.35, 1.35]
        // tartomanyaban keressuk egy 600x600-as haloval es az
        // aktualis nagyitasi pontossaggal:
        new MandelbrotHalmazNagyito(-2.0, .7, -1.35, 1.35, 600, 255);
    }
}                    
]]>
        </programlisting>
    </section>
    <section>
        <title>MALMO</title>
        <para>
            Megoldás forrása:
            <link xlink:href="">Github</link>
        </para>
        <para>
            Megoldás videó:
            <link xlink:href="">YouTube</link>
        </para>
    </section>
</chapter>