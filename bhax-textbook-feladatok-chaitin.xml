<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chaitin!</title>
        <keywordset>
            <keyword />
        </keywordset>
    </info>
    <section>
        <title>Iteratív és rekurzív faktoriális Lisp-ben</title>
        <para></para>
        <para>
            Megoldás videó:
            <link xlink:href="https://youtu.be/z6NJE2a1zIA">https://youtu.be/z6NJE2a1zIA</link>
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>Ahogy a cím is jelzi, Lisp programozási nyelvben, iteratív és rekurzív módon megírt programról lesz szó</para>
        <para>
            A kód,
            <link xlink:href="https://gitlab.com/rbesenczi/bhax/-/blob/master/thematic_tutorials/Chaitin/fact.lisp">Besenczi Renátó GitLab oldaláról</link>
            származik
        </para>
        <para>A program elején egy shebang található</para>
        <programlisting>
            <![CDATA[ 
#!/usr/bin/clisp
        ]]>
        </programlisting>
        <para>Ezt követôen, az alábbi kódcsipet az iteratív eljárás megvalósítását mutatja</para>
        <programlisting>
            <![CDATA[ 
(defun factorial_iterative (n)
    (let ((f 1))
        (dotimes (i n)
        (setf f (* f (+ i 1))))
        f
    )
)
            ]]>
        </programlisting>
        <para>A rekurzív módszer</para>
        <programlisting>
            <![CDATA[ 
(defun factorial_recursive (n)
    (if (= n 0)
        1
        (* n (factorial_recursive (- n 1))) ) )           
            ]]>
        </programlisting>
        <para>
            A format segítségével kiíratjuk, hogy Recursive, majd loop segítségével kiíratjuk az elsô 20 rekurzív faktoriális számot.
        </para>
        <programlisting>
            <![CDATA[ 
(format t "Recursive:~%")

(loop for i from 0 to 20
    do (format t "~D! = ~D~%" i (factorial_recursive i)) )
            ]]>
        </programlisting>
        <para>Ezután megcsináljuk ugyanezt az iteratív verzióval is:</para>
        <programlisting>
            <![CDATA[ 
(format t "Iterative:~%")

(loop for i from 0 to 20
    do (format t "~D! = ~D~%" i (factorial_iterative i)) )
            
            ]]>
        </programlisting>
    </section>
    <!--        
    <section>
        <title>Weizenbaum Eliza programja</title>
        <para>
            Éleszd fel Weizenbaum Eliza programját!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
    </section>        
-->
    <section>
        <title>Gimp Scheme Script-fu: króm effekt</title>
        <para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely megvalósítja a króm effektet egy 
            bemenő szövegre!
        </para>
        <para>
            Megoldás videó:
            <link xlink:href="https://youtu.be/OKdAkI_c7Sc">https://youtu.be/OKdAkI_c7Sc</link>
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="Chaitin/chrome.scm">chrome.scm</link>
            ,
            <link xlink:href="Chaitin/chrome_border.scm">chrome_border.scm</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>Ezek a file-ok .scm kiterjesztésûek, ami a GIMP képmanipulátor programhoz írandó script file.</para>
        <para>Jelen esetben a script egy megadott szöveghez króm effektet ad.</para>
        <programlisting>
            <![CDATA[ 
            ; bhax_chrome3.scm
            ;
            ; BHAX-Chrome creates a chrome effect on a given text.
            ; Copyright (C) 2019  
            ; Norbert Bátfai, batfai.norbert@inf.unideb.hu
            ; Nándor Bátfai, batfai.nandi@gmail.com
            ;
            ;    This program is free software: you can redistribute it and/or modify
            ;    it under the terms of the GNU General Public License as published by
            ;    the Free Software Foundation, either version 3 of the License, or
            ;    (at your option) any later version.
            ;
            ;    This program is distributed in the hope that it will be useful,
            ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
            ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            ;    GNU General Public License for more details.
            ;
            ;    You should have received a copy of the GNU General Public License
            ;    along with this program.  If not, see <https://www.gnu.org/licenses/>.
            ;
            ; Version history
            ;
            ;  This Scheme code is partially based on the Gimp tutorial 
            ;  http://penguinpetes.com/b2evo/index.php?p=351 
            ;  (the interactive steps of this tutorial are written in Scheme)
            ;
            ;  https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv
            ; 
            ; 8 byte-os színösszetettség a krómeffekt létrehozásához
            (define (color-curve)
                (let* (
                    (tomb (cons-array 8 'byte))
                )
                    (aset tomb 0 0)
                    (aset tomb 1 0)
                    (aset tomb 2 50)
                    (aset tomb 3 190)
                    (aset tomb 4 110)
                    (aset tomb 5 20)
                    (aset tomb 6 200)
                    (aset tomb 7 190)
                tomb)    
            )
            
            ;(color-curve)
            
            (define (elem x lista)
            
                (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )
            
            )
            
            ; A szöveg szélességének és magasságának definiálása, amiben a GIMP beépített pluginja segít 
            (define (text-wh text font fontsize)
            (let*
                (
                    (text-width 1)
                    (text-height 1)
                )
             
                (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
                (set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
                
                (list text-width text-height)
                )
            )
            
            ;(text-width "alma" "Sans" 100)

            ; Itt a kép létrehozása és a rétegek létrehozása történik a kròm effekthez, amihez kell a szöveg, betûméret, szín, átmenet, szélesség, magasság.
            (define (script-fu-bhax-chrome text font fontsize width height color gradient)
            (let*
                (
                    (image (car (gimp-image-new width height 0)))
                    (layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
                    (textfs)
                    (text-width (car (text-wh text font fontsize)))
                    (text-height (elem 2 (text-wh text font fontsize)))
                    (layer2)        
                )
                
                ;step 1
                (gimp-image-insert-layer image layer 0 0)
                (gimp-context-set-foreground '(0 0 0))
                (gimp-drawable-fill layer  FILL-FOREGROUND )
                (gimp-context-set-foreground '(255 255 255))
               
                (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
                (gimp-image-insert-layer image textfs 0 0)   
                (gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2)) (- (/ height 2) (/ text-height 2)))
               
                (set! layer (car(gimp-image-merge-down image textfs CLIP-TO-BOTTOM-LAYER)))
               
                ;step 2   
                (plug-in-gauss-iir RUN-INTERACTIVE image layer 15 TRUE TRUE)
               
                ;step 3
                (gimp-drawable-levels layer HISTOGRAM-VALUE .11 .42 TRUE 1 0 1 TRUE)
               
                ;step 4   
                (plug-in-gauss-iir RUN-INTERACTIVE image layer 2 TRUE TRUE)
            
                ;step 5    
                (gimp-image-select-color image CHANNEL-OP-REPLACE layer '(0 0 0))
                (gimp-selection-invert image)
            
                ;step 6        
                (set! layer2 (car (gimp-layer-new image width height RGB-IMAGE "2" 100 LAYER-MODE-NORMAL-LEGACY)))
                (gimp-image-insert-layer image layer2 0 0)
            
                ;step 7        
                (gimp-context-set-gradient gradient) 
                (gimp-edit-blend layer2 BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-LINEAR 100 0 REPEAT-NONE 
                    FALSE TRUE 5 .1 TRUE width (/ height 3) width  (- height (/ height 3)))
                
                ;step 8        
                (plug-in-bump-map RUN-NONINTERACTIVE image layer2 layer 120 25 7 5 5 0 0 TRUE FALSE 2)
               
                ;step 9       
                (gimp-curves-spline layer2 HISTOGRAM-VALUE 8 (color-curve))
                  
                (gimp-display-new image)
                (gimp-image-clean-all image)
                )
            )

            ; Itt hozzuk létre a króm effektes szöveget
            ;(script-fu-bhax-chrome "Bátf41 Haxor" "Sans" 120 1000 1000 '(255 0 0) "Crown molding")

            ; Itt regisztráljuk a scriptünket a GIMP-ben
            (script-fu-register "script-fu-bhax-chrome"
                "Chrome3"
                "Creates a chrome effect on a given text."
                "Norbert Bátfai"
                "Copyright 2019, Norbert Bátfai"
                "January 19, 2019"
                ""
                SF-STRING       "Text"      "Bátf41 Haxor"
                SF-FONT         "Font"      "Sans"
                SF-ADJUSTMENT   "Font size" '(100 1 1000 1 10 0 1)
                SF-VALUE        "Width"     "1000"
                SF-VALUE        "Height"    "1000"
                SF-COLOR        "Color"     '(255 0 0)
                SF-GRADIENT     "Gradient"  "Crown molding"    
            )
            (script-fu-menu-register "script-fu-bhax-chrome" 
                "<Image>/File/Create/BHAX"
            )
            
            ]]>
        </programlisting>
    </section>

    <section>
        <title>Gimp Scheme Script-fu: név mandala</title>
        <para>
            Írj olyan script-fu kiterjesztést a GIMP programhoz, amely név-mandalát készít a
            bemenő szövegből!               
        </para>
        <para>
            Megoldás videó:
            <link xlink:href="https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv">https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv</link>
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="Chaitin/mandala.scm">mandala.scm</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>Ez is egy .scm kiterjesztésû file, ami a GIMP scripteléséhez kell.</para>
        <para>A program lényege, hogy a megadott szövegbôl mandalát rajzol ki.</para>
        <programlisting>
            <![CDATA[ 
            ; bhax_mandala9.scm
            ;
            ; BHAX-Mandala creates a mandala from a text box.
            ; Copyright (C) 2019  Norbert Bátfai, batfai.norbert@inf.unideb.hu
            ;
            ;    This program is free software: you can redistribute it and/or modify
            ;    it under the terms of the GNU General Public License as published by
            ;    the Free Software Foundation, either version 3 of the License, or
            ;    (at your option) any later version.
            ;
            ;    This program is distributed in the hope that it will be useful,
            ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
            ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
            ;    GNU General Public License for more details.
            ;
            ;    You should have received a copy of the GNU General Public License
            ;    along with this program.  If not, see <https://www.gnu.org/licenses/>.
            ;
            ; Version history
            ;
            ;  This Scheme code is partially based on the Python code 
            ;  Pat625_Mandala_With_Your_Name.py by Tin Tran, which is released under the GNU GPL v3, see 
            ;  https://gimplearn.net/viewtopic.php/Pat625-Mandala-With-Your-Name-Script-for-GIMP?t=269&p=976
            ;
            ;  https://bhaxor.blog.hu/2019/01/10/a_gimp_lisp_hackelese_a_scheme_programozasi_nyelv
            ; 
            
            (define (elem x lista)
            
                (if (= x 1) (car lista) (elem (- x 1) ( cdr lista ) ) )
            
            )
            
            ; A szöveg szélességének meghatározása
            (define (text-width text font fontsize)
            (let*
                (
                    (text-width 1)
                )
                (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
            
                text-width
                )
            )
            
            ; A szöveg szélességének magasságának meghatározása
            (define (text-wh text font fontsize)
            (let*
                (
                    (text-width 1)
                    (text-height 1)
                )
                ;;;
                (set! text-width (car (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
                ;;; ved ki a lista 2. elemét
                (set! text-height (elem 2  (gimp-text-get-extents-fontname text fontsize PIXELS font)))    
                ;;;    
                
                (list text-width text-height)
                )
            )
            
            
            ;(text-width "alma" "Sans" 100)
            
            ; Itt készülnek el a rétegek, a méretezés és a transzformációk a mandala kirajzolásához, 8 paraméter kell hozzá a betûméret, a típus, a szín, a szélesség, a magasság, az átmenet, a szöveg és, hogy középen legyen
            (define (script-fu-bhax-mandala text text2 font fontsize width height color gradient)
            (let*
                (
                    (image (car (gimp-image-new width height 0)))
                    (layer (car (gimp-layer-new image width height RGB-IMAGE "bg" 100 LAYER-MODE-NORMAL-LEGACY)))
                    (textfs)
                    (text-layer)
                    (text-width (text-width text font fontsize))
                    ;;;
                    (text2-width (car (text-wh text2 font fontsize)))
                    (text2-height (elem 2 (text-wh text2 font fontsize)))
                    ;;;
                    (textfs-width)
                    (textfs-height)
                    (gradient-layer)
                )
            
                (gimp-image-insert-layer image layer 0 0)
            
                (gimp-context-set-foreground '(0 255 0))
                (gimp-drawable-fill layer FILL-FOREGROUND)
                (gimp-image-undo-disable image) 
            
                (gimp-context-set-foreground color)
            
                (set! textfs (car (gimp-text-layer-new image text font fontsize PIXELS)))
                (gimp-image-insert-layer image textfs 0 -1)
                (gimp-layer-set-offsets textfs (- (/ width 2) (/ text-width 2))  (/ height 2))
                (gimp-layer-resize-to-image-size textfs)
            
                (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
                (gimp-image-insert-layer image text-layer 0 -1)
                (gimp-item-transform-rotate-simple text-layer ROTATE-180 TRUE 0 0)
                (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
            
                (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
                (gimp-image-insert-layer image text-layer 0 -1)
                (gimp-item-transform-rotate text-layer (/ *pi* 2) TRUE 0 0)
                (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
            
                (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
                (gimp-image-insert-layer image text-layer 0 -1)
                (gimp-item-transform-rotate text-layer (/ *pi* 4) TRUE 0 0)
                (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))
                
                (set! text-layer (car (gimp-layer-new-from-drawable textfs image)))
                (gimp-image-insert-layer image text-layer 0 -1)
                (gimp-item-transform-rotate text-layer (/ *pi* 6) TRUE 0 0)
                (set! textfs (car(gimp-image-merge-down image text-layer CLIP-TO-BOTTOM-LAYER)))    
                
                (plug-in-autocrop-layer RUN-NONINTERACTIVE image textfs)
                (set! textfs-width (+ (car(gimp-drawable-width textfs)) 100))
                (set! textfs-height (+ (car(gimp-drawable-height textfs)) 100))
                    
                (gimp-layer-resize-to-image-size textfs)
                
                (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
                    (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
                (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
                    
                (gimp-context-set-brush-size 22)
                (gimp-edit-stroke textfs)
                
                (set! textfs-width (- textfs-width 70))
                (set! textfs-height (- textfs-height 70))
                
                (gimp-image-select-ellipse image CHANNEL-OP-REPLACE (- (- (/ width 2) (/ textfs-width 2)) 18) 
                    (- (- (/ height 2) (/ textfs-height 2)) 18) (+ textfs-width 36) (+ textfs-height 36))
                (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
                    
                (gimp-context-set-brush-size 8)
                (gimp-edit-stroke textfs)
                    
                (set! gradient-layer (car (gimp-layer-new image width height RGB-IMAGE "gradient" 100 LAYER-MODE-NORMAL-LEGACY)))
                
                (gimp-image-insert-layer image gradient-layer 0 -1)
                (gimp-image-select-item image CHANNEL-OP-REPLACE textfs)
                (gimp-context-set-gradient gradient) 
                (gimp-edit-blend gradient-layer BLEND-CUSTOM LAYER-MODE-NORMAL-LEGACY GRADIENT-RADIAL 100 0 
                REPEAT-TRIANGULAR FALSE TRUE 5 .1 TRUE (/ width 2) (/ height 2) (+ (+ (/ width 2) (/ textfs-width 2)) 8) (/ height 2))
                
                (plug-in-sel2path RUN-NONINTERACTIVE image textfs)
            
                (set! textfs (car (gimp-text-layer-new image text2 font fontsize PIXELS)))
                (gimp-image-insert-layer image textfs 0 -1)
                (gimp-message (number->string text2-height))
                (gimp-layer-set-offsets textfs (- (/ width 2) (/ text2-width 2)) (- (/ height 2) (/ text2-height 2)))
                    
                ;(gimp-selection-none image)
                ;(gimp-image-flatten image)

                ; Ez a sor jeleníti meg az új képünket
                (gimp-display-new image)
                (gimp-image-clean-all image)
                )
            )
            
            ;(script-fu-bhax-mandala "Bátfai Norbert" "BHAX" "Ruge Boogie" 120 1920 1080 '(255 0 0) "Shadows 3")
            
            ; A script regisztrálása a GIMP-ben
            (script-fu-register "script-fu-bhax-mandala"
                "Mandala9"
                "Creates a mandala from a text box."
                "Norbert Bátfai"
                "Copyright 2019, Norbert Bátfai"
                "January 9, 2019"
                ""
                SF-STRING       "Text"      "Bátf41 Haxor"
                SF-STRING       "Text2"     "BHAX"
                SF-FONT         "Font"      "Sans"
                SF-ADJUSTMENT   "Font size" '(100 1 1000 1 10 0 1)
                SF-VALUE        "Width"     "1000"
                SF-VALUE        "Height"    "1000"
                SF-COLOR        "Color"     '(255 0 0)
                SF-GRADIENT     "Gradient"  "Deep Sea"
            )
            (script-fu-menu-register "script-fu-bhax-mandala" 
                "<Image>/File/Create/BHAX"
            )
            
            ]]>
        </programlisting>
    </section>

    <section>
        <title>Vörös Pipacs Pokol/javíts tovább a javított 19 RF-eden</title>
        <para>
            Megoldás forrása:
            <link xlink:href="https://github.com/nbatfai/RedFlowerHell">https://github.com/nbatfai/RedFlowerHell</link>
        </para>
        <para>Sajnos a YouTube linkem továbbra sem mûködik, de a linkje: </para>
        <programlisting>
            <![CDATA[ 
            https://www.youtube.com/watch?v=48Z-MffMeYo&t=4s            
            ]]>
        </programlisting>
        <para>
            Tanulságok, tapasztalatok, magyarázat... ezt kell az olvasónak kidolgoznia, mint labor- vagy otthoni mérési feladatot!
            Ha mi már megtettük, akkor használd azt, dolgozd fel, javítsd, adj hozzá értéket!
        </para>
    </section>

    <!--    
    <section>
        <title>Lambda</title>
        <para>
            Hasonlítsd össze a következő programokat!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
-->

    <!--
    <section>
        <title>Omega</title>
        <para>
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
    </section>        
-->
</chapter>