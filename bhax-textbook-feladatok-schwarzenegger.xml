<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword />
        </keywordset>
    </info>
    <section>
        <title>Szoftmax Py MNIST</title>
        <para>
            Python
        </para>
        <para>
            Megoldás videó:
            <link xlink:href="https://youtu.be/JZw5k9Oz5UA">YouTube</link>
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0">https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0</link>
            (/tensorflow-0.9.0/tensorflow/examples/tutorials/mnist/),
            <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Elsô nekifutásra létrehoztam egy virtual environment -et, a
            <link xlink:href="https://www.tensorflow.org/install/pip#mac-os_1">TensorFlow oldalán talált javaslattal.</link>
        </para>
        <para>Ezt követôen pip segítségével installáltam a TensorFlow és a Pillow packageket, melyeket a program használ.</para>
        <para>Ezt a sorozatot követte az a szembesülés, hogy nem fogom tudni futtatni a progit, mivel a 2015-ös 15"-es Macbook Pro-ban nincsen videókártya, ha lenne, az is AMD lenne, így a PC-men kell folytatnom.</para>
        <para>
            A PC-men létrehoztam a workspace-emet VSCode-ban, elvégeztem a fentebb leírtakat újra, plusz letöltöttem és telepítettem a
            <link xlink:href="https://developer.nvidia.com/cuda-10.1-download-archive-base">CUDA ToolKit 10.01-et</link>
            , majd regisztráltam az nVidia Developer programjára, hogy letölthessem és "telepítsem" a
            <link xlink:href="https://developer.nvidia.com/cudnn">cuDNN -t</link>
            .
        </para>
        <para>A program leírása: </para>
        <para>
            Az mnist1.py -t
            <link xlink:href="https://gitlab.com/rbesenczi/bhax/-/blob/master/thematic_tutorials/Schwarzenegger/MNIST/mnist1.py">Besenczi Renátó GitLab oldaláról</link>
            töltöttem le
        </para>
        <para>
            A program lényege, hogy neurális hálót tanítunk
            <link xlink:href="https://python.org/">Python</link>
            nyelvben, a
            <link xlink:href="https://tensorflow.org">TensorFlow</link>
            keretrendszer segítségével, amit a Google fejlesztett ki gépi tanulás céljára. A tanítás 5 futtatásból (epoch-ból) áll. A loss (az osztályzásunk hibája) csökken, míg az accuracy (az osztályzásunk pontossága) nô. Ez azt jelenti, hogy a tanítás végére 97%-os pontossággal tudta megmondani, hogy az adott képen milyen számjegy szerepel. Az epoch növelésével elenyészôen, de javítható a pontosság.
        </para>
        <para>A program felépítése: </para>
        <programlisting>
            <![CDATA[ 
# mnist1.py
# Importáljuk a tensorflow -ot tf -ként
import tensorflow as tf

mnist = tf.keras.datasets.mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(input_shape=(28, 28)),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(10)
])

predictions = model(x_train[:1]).numpy()
predictions

tf.nn.softmax(predictions).numpy()

loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

loss_fn(y_train[:1], predictions).numpy()

model.compile(optimizer='adam',
                loss=loss_fn,
                metrics=['accuracy'])
# Itt állíthatjuk, hogy hány tanításon menjen végig (most 5)
model.fit(x_train, y_train, epochs=5)

model.evaluate(x_test,  y_test, verbose=2)

probability_model = tf.keras.Sequential([
    model,
    tf.keras.layers.Softmax()
])

probability_model(x_test[:5])
            
            ]]>
        </programlisting>
        <para>A program futtatása: </para>
        <programlisting>
            <![CDATA[ 
$ python mnist1.py
            ]]>
        </programlisting>
    </section>

    <!--
    <section>
        <title>Szoftmax R MNIST</title>
        <para>
            R            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->

    <section>
        <title>Mély MNIST</title>
        <para>
            Python            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:             
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>A program lényege: </para>
        <para>
            Továbbra is neurális hálót tanít a program, viszont bemeneti képet is kezel. A képet áttranszformálja, 28x28 px-es kép lesz. Futás közben az átalakított képet megmutatja. A futás végén kiírja, hogy hanyas számot látott. 
        </para>
        <para>
            A program továbbra is
            <link xlink:href="https://gitlab.com/rbesenczi/bhax/-/blob/master/thematic_tutorials/Schwarzenegger/MNIST/mnist1.py">Besenczi Renátó GitLab</link>
            oldaláról származik
        </para>
        <para>A program felépítése: </para>
        <programlisting>
            <![CDATA[ 
# mnist_cnn.py
# Importáljuk a tensorflow tf néven
import tensorflow as tf
# Importáljuk a Seqential -t a tensorflow.keras.models -bôl
from tensorflow.keras.models import Sequential
# Importáljuk a Dense -t, Con2D -t, Dropout -ot és Flatten -t a tensorflow.keras.layers -bôl
from tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D

# Importáljuk a Pillow -ból az Image -et
from PIL import Image
# Importáljuk a numpy -t np néven
import numpy as np
# Importáljuk a sys -t
import sys

# Ez a következô 3 kódsor a GPU kereséséért felel, ha nincs, akkor megáll a program és kiírja, hogy "Not enough GPU hardware devices available"
physical_devices = tf.config.experimental.list_physical_devices('GPU')
assert len(physical_devices) > 0, "Not enough GPU hardware devices available"
tf.config.experimental.set_memory_growth(physical_devices[0], True)

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

model = Sequential()
model.add(Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation=tf.nn.relu))
model.add(Dropout(0.2))
model.add(Dense(10,activation=tf.nn.softmax))

tb_log_dir = "./cnn_tb"
file_writer = tf.summary.create_file_writer(tb_log_dir)
file_writer.set_as_default()
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=tb_log_dir, profile_batch=0)

model.compile(optimizer='adam', 
                loss='sparse_categorical_crossentropy', 
                metrics=['accuracy'])

model.fit(x=x_train,y=y_train, epochs=10, callbacks=[tensorboard_callback])

model.evaluate(x_test, y_test)

# A felismerendô szám képe, melyet 28x28 px -re fog redukálni
input_image = np.array(Image.open(sys.argv[1]).getdata(0).resize((28, 28), 0))

pred = model.predict(input_image.reshape(1, 28, 28, 1))

print (pred)
# Kiíratjuk, hogy milyen számot látott
print("The number is = ", pred.argmax())
            
            ]]>
        </programlisting>
        <para>A program futtatása: </para>
        <programlisting>
            <![CDATA[ 
$ python mnist_cnn.py
            ]]>
        </programlisting>
    </section>
    <!--
    <section>
        <title>Deep dream</title>
        <para>
            Keras            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
        Most, hogy már van némi ágensprogramozási gyakorlatod, adj egy rövid általános áttekintést a MALMÖ projektről!
        </para>
        <para>
            Megoldás videó: initial hack:
            <link xlink:href="https://youtu.be/bAPSu3Rndi8">https://youtu.be/bAPSu3Rndi8</link>
            .
        Red Flower Hell:
            <link xlink:href="https://github.com/nbatfai/RedFlowerHell">https://github.com/nbatfai/RedFlowerHell</link>
            .
        </para>
        <para>
        Megoldás forrása: a Red Flower Hell repójában.               
        </para>
        <para>
        Tanulságok, tapasztalatok, magyarázat... ezt kell az olvasónak kidolgoznia, mint labor- vagy otthoni mérési feladatot!
        Ha mi már megtettük, akkor használd azt, dolgozd fel, javítsd, adj hozzá értéket!
        </para>
        <para>A MALMÖ projekt egy Minecraft kliens-t használó ágensprogramozási környezet, melyben különféle programozási nyelveken (pl.: C++, Python, Lua...stb.) lehet ágenseket programozni.</para>
        <para>Jelen esetben, a Red Flower Hellben ágensünket Steve-t arra kellett programozni (Python és C++ nyelven), hogy egy legenerált arénában rózsákat szedjen. A pálya egy fordított piramis, melynek tetejérôl folyamatosan láva folyt, így Steve-t be kell programozni arra, hogy észrevegye, ha láva van körülötte, ha rózsa és azt kiüsse+felvegye.</para>
    </section>
    <section>
        <title>Vörös Pipacs Pokol/javíts a 19 RF-en</title>
        <para>
            Megoldás forrása:
            <link xlink:href="Mandelbrot/greenpill_mod_30rf.py">greenpill_mod_30rf.py</link>
        </para>
        <para>
        Tanulságok, tapasztalatok, magyarázat... ezt kell az olvasónak kidolgoznia, mint labor- vagy otthoni mérési feladatot!
        Ha mi már megtettük, akkor használd azt, dolgozd fel, javítsd, adj hozzá értéket!
        </para>
        <para>Én a 30 rózsát összeszedô, greenpill (amelyet Bátfai Norbert fejlesztett) tovább fejlesztett Python kódomat raktam ehhez a szekcióhoz.</para>
    </section>


</chapter>