<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword />
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás videó:
            <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="Conway/Hangyaszimulator">Hangyaszimulator</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>A program leírása:</para>
        <para>
            A program lényege, mint ahogy a cím is adja, hogy egy 
            hangyaszimulációt futtatunk. A hangyák a bojból kilépve 
            feromonokat bocsájtanak ki, amivel megtalálják egymást és 
            a képzett utakon haladnak együtt.
        </para>
        <para>A program futtatása:</para>
        <programlisting>
            <![CDATA[ 
qmake myrmecologist
make myrmecologist
./myrmecologist
            ]]>
        </programlisting>
        <para>A program felépítése:</para>
        <itemizedlist>
            <listitem>
                <para>
                    ant.h - Ez a header az Ant class-t írja le, amelynek
                    publikus tulajdonságai az x, y koordináták és az irány.
                </para>
                <programlisting>
                    <![CDATA[ 
// BHAX Myrmecologist
//
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// https://bhaxor.blog.hu/2018/09/26/hangyaszimulaciok
// https://bhaxor.blog.hu/2018/10/10/myrmecologist
//

#ifndef ANT_H
#define ANT_H

// Az Ant osztály
class Ant
{

    // Az Ant osztály publikus tulajdonságai
public:
    // X-koordináta
    int x;
    // Y-koordináta
    int y;
    // Irány
    int dir;

    Ant(int x, int y) : x(x), y(y)
    {

        dir = qrand() % 8;
    }
};

typedef std::vector<Ant> Ants;

#endif
                    
]]>
                </programlisting>
            </listitem>
            <listitem>
                <para>
                    antthread.h - Ez a header tartalmazza a feromonnal 
                    kapcsolatos tulajdonságokat (feromon szám, párolgás mértéke),
                    és két rács tulajdonságot.
                </para>
                <programlisting>
                    <![CDATA[ 
// BHAX Myrmecologist
//
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// https://bhaxor.blog.hu/2018/09/26/hangyaszimulaciok
// https://bhaxor.blog.hu/2018/10/10/myrmecologist
//

#ifndef ANTTHREAD_H
#define ANTTHREAD_H

#include <QThread>
#include "ant.h"

class AntThread : public QThread
{
    Q_OBJECT
    // Az AntThread osztály publikus tulajdonságai
public:
    // Konstruktor
    AntThread(Ants *ants, int ***grids, int width, int height,
                int delay, int numAnts, int pheromone, int nbrPheromone,
                int evaporation, int min, int max, int cellAntMax);
    // Destruktor
    ~AntThread();
    // A kezdés
    void run();
    // Ha vége, a futás legyen false
    void finish()
    {
        running = false;
    }
    // Álljon meg a hangya vagy ne
    void pause()
    {
        paused = !paused;
    }
    // A futást csekkoló funkció
    bool isRunnung()
    {
        return running;
    }
    // Az AntThread osztály privát tulajdonságai
private:
    // Boolean értékkel megy-e a hangya
    bool running{true};
    // Boolean értékkel áll-e a hangya
    bool paused{false};
    // A hangyák tuljadonságai
    Ants *ants;
    // Hangyákat tartalmazó cellák száma
    int **numAntsinCells;
    // Minimum és maximum
    int min, max;
    // A cella, hangyákat tartalmazó maximális száma
    int cellAntMax;
    // Feromon
    int pheromone;
    // Párolgás
    int evaporation;
    // Feromon szám
    int nbrPheromone;
    // Rácsok tulajdonságai
    int ***grids;
    // Szélesség
    int width;
    // Magasság
    int height;
    int gridIdx;
    // Késleltetés
    int delay;

    void timeDevel();

    int newDir(int sor, int oszlop, int vsor, int voszlop);
    void detDirs(int irany, int &ifrom, int &ito, int &jfrom, int &jto);
    int moveAnts(int **grid, int row, int col, int &retrow, int &retcol, int);
    double sumNbhs(int **grid, int row, int col, int);
    void setPheromone(int **grid, int row, int col);

signals:
    void step(const int &);
};

#endif
                    
                    ]]>
                </programlisting>
            </listitem>
            <listitem>
                <para>
                    antthread.cpp - Az antthread.h és további headerek include-olása 
                    után létrehozunk egy objektumot. A hangyákat tartalmazó cellákat 0-ra
                    inicializáljuk helyet foglalva a memóriában. Eztkövetôen megadjuk
                    a hangyák sorát és oszlopát, random számok generálásával. Növeljük a
                    cellák értékét és betöltjük egy vektorba a hangyákat. A newDir(), detDirs()
                    és a moveAnts() functionok segítségével módosítjuk a hangyák mozgását.
                    A newDir() csekkolja, hogy jó-e az irány, a detDirs() pedig beállītja a
                    megfelelô utat. A timeDevel() a hangyák körül lévô rácspontokat elemzi,
                    emellett a mozgásukat és feromonkibocsájtásukat is állítja.
                    A setPheromon() végzi a feromon kibocsájtást. A run() függvénnyel
                    a futtató szál alvását halasztjuk (ha fut a program), ha nem fut, akkor
                    a timeDevel() hívódik meg, ha egyik sem, akkor kilép és a destruktor 
                    felszabadítja a memóriát.
                </para>
            </listitem>
            <listitem>
                <para>
                    antwin.h - Ez a header tartalmazza a szélesség és magasság 
                    koordinátákat, a hangyák feromon értékeinek minimumját és a hangyák
                    számításait.
                </para>
                <programlisting>
                    <![CDATA[ 
// BHAX Myrmecologist
//
// Copyright (C) 2019
// Norbert Bátfai, batfai.norbert@inf.unideb.hu
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
// https://bhaxor.blog.hu/2018/09/26/hangyaszimulaciok
// https://bhaxor.blog.hu/2018/10/10/myrmecologist
//

#ifndef ANTWIN_H
#define ANTWIN_H

#include <QMainWindow>
#include <QPainter>
#include <QString>
#include <QCloseEvent>
#include "antthread.h"
#include "ant.h"

class AntWin : public QMainWindow
{
    Q_OBJECT
    // Az AntWin osztály publikus tulajdonságai
public:
    // Konstruktor
    AntWin(int width = 100, int height = 75,
            int delay = 120, int numAnts = 100,
            int pheromone = 10, int nbhPheromon = 3,
            int evaporation = 2, int cellDef = 1,
            int min = 2, int max = 50,
            int cellAntMax = 4, QWidget *parent = 0);

    AntThread *antThread;

    void closeEvent(QCloseEvent *event)
    {

        antThread->finish();
        antThread->wait();
        event->accept();
    }

    void keyPressEvent(QKeyEvent *event)
    {

        if (event->key() == Qt::Key_P)
        {
            antThread->pause();
        }
        else if (event->key() == Qt::Key_Q || event->key() == Qt::Key_Escape)
        {
            close();
        }
    }
    // Destruktor
    virtual ~AntWin();
    void paintEvent(QPaintEvent *);
    // Az AntWin osztály privát tulajdonságai
private:
    // A rács tulajdonságai
    int ***grids;
    // A cellák
    int **grid;
    int gridIdx;
    // Cella szélesség
    int cellWidth;
    // Cella magasság
    int cellHeight;
    // Szélesség
    int width;
    // Magasság
    int height;
    // Maximum
    int max;
    // Minimum
    int min;
    // A hangyák és tulajdonságaik
    Ants *ants;

public slots:
    void step(const int &);
};

#endif
                    
                    ]]>
                </programlisting>
            </listitem>
            <listitem>
                <para>antwin.cpp - Ez a C++ file végzi a program nevének, ablakának (és ennek paramétereinek)
                    meghatározását. Az AntThread és Ants objektumok létrehozása után, elindul
                    az AntThred. A program végén a destruktor felszabadítja a memóriát. 
                </para>
            </listitem>
            <listitem>
                <para>main.cpp - Ez a C++ file végzi a program futtatását.</para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: Folyamatban
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="Conway/Eletjatek_Java"></link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>A program leírása:</para>
        <para>
            Az egész program a Sejtautomata.java fileban található meg (egy osztály). 
            A main() -ben a Sejtautomata objektumot létrehozva 100 oszlopot és 75 sort készítünk.
            Beállítjuk a cellák méreteit, illetve a program ablakát. A cellákat a rács elkészítése 
            után "halottra" állítjuk. A "K", "N", "S" billentyûk segítségével megváltoztathatjuk 
            a cellák méretét és pillanatképet (.png-ként) készíthetünk. A MouseListener segítségével a 
            kattintásokat figyeljük. A sejtek színeit a setColor() -ral tudjuk állítani a sejt  
            szomszédjainak megfelelôen. A sejttéren lesznek a létrehozott siklokilovo és siklo függvények.
        </para>
        <para>A program futtatása:</para>
        <programlisting>
            <![CDATA[ 
javac Sejtautomata.java
java Sejtautomata
            ]]>
        </programlisting>
        <para>A program felépítése:</para>
        <itemizedlist>
            <listitem>
                <para>
                    Sejtautomata.java
                </para>
                <programlisting>
                    <![CDATA[ 
/*
* Sejtautomata.java
*
* DIGIT 2005, Javat tanitok
* Batfai Norbert, nbatfai@inf.unideb.hu
*
*/
/**
* Sejtautomata osztaly.
*
* @author Batfai Norbert, nbatfai@inf.unideb.hu
* @version 0.0.1
*/
public class Sejtautomata extends java.awt.Frame implements Runnable {
    // Élő sejt
    public static final boolean eLo = true;
    // Halott sejt
    public static final boolean HALOTT = false;
    // Két rácsot használunk, az egyik a sejtter állapotát jellemzi, ami a t_n
    // a másik a t_n+1, ami az adott idôpillanátban jellemzi
    protected boolean[][][] racsok = new boolean[2][][];
    // Valamelyik rácsra mutat, technikai jellegû, hogy ne kelljen a [2][][]-bôl az
    // elsô dimenziót használni, mert vagy az egyikre állítjuk, vagy a másikra.

    protected boolean[][] racs;
    // Az aktuális rács
    protected int racsIndex = 0;
    // A cella szélessége (pixel)
    protected int cellaSzelesseg = 20;
    // A cella magassága (pixel)
    protected int cellaMagassag = 20;
    // A sejttér szélessége
    protected int szelesseg = 20;
    // A sejttér magassága
    protected int magassag = 10;
    // A sejttér két egymást követô t_n es t_n+1 diszkrét idôpillanata közötti valós
    // idô.
    protected int varakozas = 1000;
    // Pillanatfelvetel keszitesehez
    private java.awt.Robot robot;
    // Pillanatfelvétel
    private boolean pillanatfelvetel = false;
    // A pillanatfelvételek számozásához használandó számláló
    private static int pillanatfelvetelSzamlalo = 0;

    /**
    * Létrehoz egy <code>Sejtautomata</code> objektumot.
    *
    * @param szelesseg a sejttér szélessége.
    * @param magassag  a sejttér szélessége.
    */
    public Sejtautomata(int szelesseg, int magassag) {
        this.szelesseg = szelesseg;
        this.magassag = magassag;
        // A két racs elkészítése
        racsok[0] = new boolean[magassag][szelesseg];
        racsok[1] = new boolean[magassag][szelesseg];
        racsIndex = 0;
        racs = racsok[racsIndex];
        // Halottra állítjuk a cellákat
        for (int i = 0; i < racs.length; ++i)
            for (int j = 0; j < racs[0].length; ++j)
                racs[i][j] = HALOTT;
        // élôlényeket helyezünk a cellákra
        // siklo(racs, 2, 2);
        sikloKilovo(racs, 5, 60);
        // Az ablak bezárásakor kilépünk a programból
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                setVisible(false);
                System.exit(0);
            }
        });
        // A billentyűzetet figyelő event listenerek
        addKeyListener(new java.awt.event.KeyAdapter() {
            // A "K", "L", "N", "G", "S" gombok lenyomását figyelő event listerenek
            public void keyPressed(java.awt.event.KeyEvent e) {
                if (e.getKeyCode() == java.awt.event.KeyEvent.VK_K) {
                    // Cella szélességének felezése
                    cellaSzelesseg /= 2;
                    // Cella magasságának felezése
                    cellaMagassag /= 2;
                    setSize(Sejtautomata.this.szelesseg * cellaSzelesseg, Sejtautomata.this.magassag * cellaMagassag);
                    validate();
                } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_N) {
                    // Cella szélességének kétszerezése
                    cellaSzelesseg *= 2;
                    // Cella magasságának kétszerezése
                    cellaMagassag *= 2;
                    setSize(Sejtautomata.this.szelesseg * cellaSzelesseg, Sejtautomata.this.magassag * cellaMagassag);
                    validate();
                } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_S)
                    pillanatfelvetel = !pillanatfelvetel;
                else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_G)
                    varakozas /= 2;
                else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_L)
                    varakozas *= 2;
                repaint();
            }
        });
        // A kattintást figyelő event listenerek
        addMouseListener(new java.awt.event.MouseAdapter() {
            // A nagyítandó területet kattintással jelöljük ki
            public void mousePressed(java.awt.event.MouseEvent m) {
                // Az egérmutató X pozíciója
                int x = m.getX() / cellaSzelesseg;
                // Az egérmutató Y pozíciója
                int y = m.getY() / cellaMagassag;
                racsok[racsIndex][y][x] = !racsok[racsIndex][y][x];
                repaint();
            }
        });
        // Az egér mozgását figyelő event listenerek
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            // A négyzet kijelölése
            public void mouseDragged(java.awt.event.MouseEvent m) {
                // Az egérmutató X pozíciója
                int x = m.getX() / cellaSzelesseg;
                // Az egérmutató Y pozíciója
                int y = m.getY() / cellaMagassag;
                racsok[racsIndex][y][x] = eLo;
                repaint();
            }
        });
        // Kezdeti cellaméretek
        cellaSzelesseg = 10;
        cellaMagassag = 10;
        // Pillanatkép készítés
        try {
            robot = new java.awt.Robot(
                    java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice());
        } catch (java.awt.AWTException e) {
            e.printStackTrace();
        }
        // Az ablak adatai
        setTitle("Sejtautomata");
        setResizable(false);
        setSize(szelesseg * cellaSzelesseg, magassag * cellaMagassag);
        setVisible(true);
        // A sejttér készítése
        new Thread(this).start();
    }

    // A sejttér kirajzolása
    public void paint(java.awt.Graphics g) {
        // Az aktualis rácsot rajzoljuk ki
        boolean[][] racs = racsok[racsIndex];
        for (int i = 0; i < racs.length; ++i) {
            for (int j = 0; j < racs[0].length; ++j) {
                // Az élő cellák kirajzolása
                if (racs[i][j] == eLo)
                    g.setColor(java.awt.Color.BLACK);
                else
                    g.setColor(java.awt.Color.WHITE);
                g.fillRect(j * cellaSzelesseg, i * cellaMagassag, cellaSzelesseg, cellaMagassag);
                // A rács kirajzolása
                g.setColor(java.awt.Color.LIGHT_GRAY);
                g.drawRect(j * cellaSzelesseg, i * cellaMagassag, cellaSzelesseg, cellaMagassag);
            }
        }
        // Pillanatfelvétel
        if (pillanatfelvetel) {
            pillanatfelvetel = false;
            pillanatfelvetel(robot.createScreenCapture(new java.awt.Rectangle(getLocation().x, getLocation().y,
                    szelesseg * cellaSzelesseg, magassag * cellaMagassag)));
        }
    }

    /**
    * Az kérdezet állapotban lévő nyolcszomszédok száma.
    *
    * @param racs    a sejttér rács
    * @param sor     a rács sora
    * @param oszlop  a rács oszlopa
    * @param allapor a nyolcszomszédok
    * @return int a kérdezett állapotbeli nyolcszomszédok száma.
    */
    public int szomszedokSzama(boolean[][] racs, int sor, int oszlop, boolean allapot) {
        int allapotuSzomszed = 0;
        // A nyolcszomszédokon való végigmenés
        for (int i = -1; i < 2; ++i)
            for (int j = -1; j < 2; ++j)
                // A vizsgált sejt kivételével:
                if (!((i == 0) && (j == 0))) {
                    // A szomszédok a szélső oldalakon és
                    // a szembe oldalakon (ez a "periodikus határfeltétel")
                    int o = oszlop + j;
                    if (o < 0)
                        o = szelesseg - 1;
                    else if (o >= szelesseg)
                        o = 0;

                    int s = sor + i;
                    if (s < 0)
                        s = magassag - 1;
                    else if (s >= magassag)
                        s = 0;

                    if (racs[s][o] == allapot)
                        ++allapotuSzomszed;
                }

        return allapotuSzomszed;
    }

    /**
    * A sejtter idobeli fejlodese a John H. Conway fele eletjatek sejtautomata
    * szabalyai alapjan tortenik. A szabalyok reszletes ismerteteset lasd peldaul a
    * [MATEK JaTeK] hivatkozasban (Csakany Bela: Diszkret matematikai jatekok.
    * Polygon, Szeged 1998. 171. oldal.)
    */
    public void idoFejlodes() {

        boolean[][] racsElotte = racsok[racsIndex];
        boolean[][] racsUtana = racsok[(racsIndex + 1) % 2];

        for (int i = 0; i < racsElotte.length; ++i) {
            for (int j = 0; j < racsElotte[0].length; ++j) {

                int elok = szomszedokSzama(racsElotte, i, j, eLo);

                if (racsElotte[i][j] == eLo) {
                    /*
                    * elo elo marad, ha ketto vagy harom elo szomszedja van, kulonben halott lesz.
                    */
                    if (elok == 2 || elok == 3)
                        racsUtana[i][j] = eLo;
                    else
                        racsUtana[i][j] = HALOTT;
                } else {
                    /*
                    * Halott halott marad, ha harom elo szomszedja van, kulonben elo lesz.
                    */
                    if (elok == 3)
                        racsUtana[i][j] = eLo;
                    else
                        racsUtana[i][j] = HALOTT;
                }
            }
        }
        racsIndex = (racsIndex + 1) % 2;
    }

    // A fejlődő sejttér
    public void run() {

        while (true) {
            try {
                Thread.sleep(varakozas);
            } catch (InterruptedException e) {
            }

            idoFejlodes();
            repaint();
        }
    }

    /**
    * A sejtterbe "elolenyeket" helyezunk, ez a "siklo". Adott iranyban halad,
    * masolja magat a sejtterben. Az eloleny ismerteteset lasd peldaul a [MATEK
    * JaTeK] hivatkozasban (Csakany Bela: Diszkret matematikai jatekok. Polygon,
    * Szeged 1998. 172. oldal.)
    *
    * @param racs a sejttér ahova ezt az állatkát helyezzük
    * @param x    a befoglaló tégla bal felső sarkának oszlopa
    * @param y    a befoglaló tegla bal felső sarkának sora
    */
    public void siklo(boolean[][] racs, int x, int y) {

        racs[y + 0][x + 2] = eLo;
        racs[y + 1][x + 1] = eLo;
        racs[y + 2][x + 1] = eLo;
        racs[y + 2][x + 2] = eLo;
        racs[y + 2][x + 3] = eLo;

    }

    /**
    * A sejtterbe "elolenyeket" helyezunk, ez a "siklo agyu". Adott iranyban
    * siklokat lo ki. Az eloleny ismerteteset lasd peldaul a [MATEK JaTeK]
    * hivatkozasban /Csakany Bela: Diszkret matematikai jatekok. Polygon, Szeged
    * 1998. 173. oldal./, de itt az abra hibas, egy oszloppal told meg balra a bal
    * oldali 4 sejtes negyzetet. A helyes agyu rajzat lasd pl. az [eLET CIKK]
    * hivatkozasban /Robert T. Wainwright: Life is Universal./ (Megemlithetjuk,
    * hogy mindketto tartalmaz ket felesleges sejtet is.)
    *
    * @param racs a sejttér ahova ezt az allatkat helyezzuk
    * @param x    a befoglaló tégla bal felső sarkának oszlopa
    * @param y    a befoglaló tégla bal felső sarkának sora
    */
    public void sikloKilovo(boolean[][] racs, int x, int y) {

        racs[y + 6][x + 0] = eLo;
        racs[y + 6][x + 1] = eLo;
        racs[y + 7][x + 0] = eLo;
        racs[y + 7][x + 1] = eLo;

        racs[y + 3][x + 13] = eLo;

        racs[y + 4][x + 12] = eLo;
        racs[y + 4][x + 14] = eLo;

        racs[y + 5][x + 11] = eLo;
        racs[y + 5][x + 15] = eLo;
        racs[y + 5][x + 16] = eLo;
        racs[y + 5][x + 25] = eLo;

        racs[y + 6][x + 11] = eLo;
        racs[y + 6][x + 15] = eLo;
        racs[y + 6][x + 16] = eLo;
        racs[y + 6][x + 22] = eLo;
        racs[y + 6][x + 23] = eLo;
        racs[y + 6][x + 24] = eLo;
        racs[y + 6][x + 25] = eLo;

        racs[y + 7][x + 11] = eLo;
        racs[y + 7][x + 15] = eLo;
        racs[y + 7][x + 16] = eLo;
        racs[y + 7][x + 21] = eLo;
        racs[y + 7][x + 22] = eLo;
        racs[y + 7][x + 23] = eLo;
        racs[y + 7][x + 24] = eLo;

        racs[y + 8][x + 12] = eLo;
        racs[y + 8][x + 14] = eLo;
        racs[y + 8][x + 21] = eLo;
        racs[y + 8][x + 24] = eLo;
        racs[y + 8][x + 34] = eLo;
        racs[y + 8][x + 35] = eLo;

        racs[y + 9][x + 13] = eLo;
        racs[y + 9][x + 21] = eLo;
        racs[y + 9][x + 22] = eLo;
        racs[y + 9][x + 23] = eLo;
        racs[y + 9][x + 24] = eLo;
        racs[y + 9][x + 34] = eLo;
        racs[y + 9][x + 35] = eLo;

        racs[y + 10][x + 22] = eLo;
        racs[y + 10][x + 23] = eLo;
        racs[y + 10][x + 24] = eLo;
        racs[y + 10][x + 25] = eLo;

        racs[y + 11][x + 25] = eLo;

    }

    // Pillanatkép készítése.
    public void pillanatfelvetel(java.awt.image.BufferedImage felvetel) {
        // A pillanatkép kép neve
        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("sejtautomata");
        sb.append(++pillanatfelvetelSzamlalo);
        sb.append(".png");
        // png formátumú képet mentünk le
        try {
            javax.imageio.ImageIO.write(felvetel, "png", new java.io.File(sb.toString()));
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }

    // Ne villogjon a felület
    public void update(java.awt.Graphics g) {
        paint(g);
    }

    // Létrehoz egy Conway-féle életjáték szabályos sejttér obektumot.
    public static void main(String[] args) {
        // 100 oszlop, 75 sor létrehozása
        new Sejtautomata(100, 75);
    }
}
                   
                    ]]>
                </programlisting>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: Folyamatban
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="Conway/Eletjatek_C++"></link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>A program leírása:</para>
        <para>A program lényege ugyanaz, mint a Java verziónak</para>
        <para>A program futtatása:</para>
        <programlisting>
            <![CDATA[ 
qmake Sejtauto.pro
make Sejtauto
./Sejtauto
            ]]>
        </programlisting>
        <para>A program felépítése:</para>
        <itemizedlist>
            <listitem>
                <para>
                    sejtablak.h - A két állapotú rácsot megadjuk a konstruktorban, ami a t_n és a t_n+1. A *** rácsok rácsra mutatnak, míg 
                    a ** rácsok rácsállapotra. A rácsindex ugyanúgy az aktuális rácsot adja. Itt található meg a sejttér és a cellák magassága, szélessége. 
                </para>
            </listitem>
            <listitem>
                <para>
                    sejtablak.cpp - Itt található meg a Sejtablak objektum, aminek a szélességét és magasságát állítjuk. 
                    Itt történik a kezdetbeni cellák sejtjeinek halottra állítása, majd az élők elhelyezése, a sikló és siklókilővő 
                    függvények. Ezeket segíti elő a Qt rajzoló függvénye. 
                </para>
            </listitem>
            <listitem>
                <para>
                    sejtszal.h - A sejtablak.h üt itt include-oljuk és egy Qt objektumot terjeszt ki. A publikus tulajdonságok 
                    között vannak a változók deklarálása, a protected tulajdonságok között a rácsok indexe.
                </para>
            </listitem>
            <listitem>
                <para>
                    sejtszal.cpp - Ez a C++ file hozza létre a Sejtszál objektumot, amely a sejtek állapotát, fejlődését és szomszédait vizsgálja.
                </para>
            </listitem>
            <listitem>
                <para>
                    main.cpp - Ez a C++ file végzi a program futtatását.
                </para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>BrainB Benchmark</title>
        <para>
            Megoldás videó: Folyamatban
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href=""></link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>A program leírása:</para>
        <para>Ez a program az emberek kongitív képességeit méri, pontosan azzal, hogy meddig tudjuk az egerünket egy négyzeten tartani. 
            Ebben az a nehézség, hogy ahogy telik az idő, úgy generálódik több négyzet, amelyek mozognak és próbálnak megzavarni minket.
        </para>
        <para>A program felépítése:</para>
        <itemizedlist>
            <listitem>
                <para>
                    BrainBThread.h - Ebben a headerben található meg a typedefként elkészített vektor, amely tartalmaz színt, 
                    nevet, sebességet és X, Y koordinátákat.
                </para>
            </listitem>
            <listitem>
                <para>
                    BrainBThread.cpp - Ebben a C++ file-ban készítünk 5 herot (melyet a BrainBThread.h -ban definiáltunk) 
                    akiket belepusholunk a BrainBThread.h -ban definiált vektorba, és létrehozzuk a BrainBThread objektumot.
                </para>
            </listitem>
            <listitem>
                <para>
                    BrainBWin.h - Ebbe a headerbe emeljük át a BrainBThread.h -ból a függvényeket. Az egér event listenere 
                    Qt függvény lesz. Itt található meg a pillanatkép elkészítésének függvénye is.
                </para>
            </listitem>
            <listitem>
                <para>
                    BrainBWin.cpp - Ebben a C++ file-ban Qt függvény segítségével létrehozzuk a program ablakát. 
                    A statisztikák logolására az endstats() segítségével egy file-ba mentjük őket. A herok helyzetéről 
                    az updateheroes() ad információt. A paintevent() függvény jeleníti meg az információkat játék közben. 
                    Kilépni egérkattintással tudunk.
                </para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Vörös Pipacs Pokol/19 RF</title>
        <para>
            Megoldás forrása:
            <link xlink:href="Conway/greenpill_mod_30rf.py">greenpill_mod_30rf.py</link>
        </para>
        <para>
            Megoldás videó:
            <link xlink:href="">YouTube</link>
        </para>
    </section>


</chapter>